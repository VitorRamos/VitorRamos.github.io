:source-highlighter: coderay
:stem:
:toc: left
:toc-title: Sumario

= Processamento Digital de Imagens Exercicios =

Vitor Ramos <ramos.vitor89@gmail.com>

== Manipulando pixels em uma imagem ==
:pastaExercicio321: Regioes/

=== Regiões ===

Implementar de um programa que deverá solicitar ao usuário as coordenadas de dois pontos stem:[P_1] e stem:[P_2] localizados dentro dos limites do tamanho da imagem que lhe for fornecida e exibir. Entretanto, a região definida pelo retângulo de vértices opostos definidos pelos pontos stem:[P_1] e stem:[P_2] será exibida com o negativo da imagem na região correspondente.

.O codigo
[source,c++]
----
include::{pastaExercicio321}/main.cpp[]
----

.Imagem Original
image:{pastaExercicio321}/biel.png[]

.Resultado
image:{pastaExercicio321}/resultado.png[]


:pastaExercicio322: TrocaRegioes/
=== Troca regiões ===
Implementar um programa que deverar trocar aleatoriamente regiões da imagem, formando uma espécie de quebra-cabeças. Explore o uso da classe Mat e seus construtores para criar as regiões que serão trocadas. O efeito é ilustrado na Figura Troca de regiões.

.O codigo
[source,c++]
----
include::{pastaExercicio322}/main.cpp[]
----

.Imagem Original
image:{pastaExercicio322}/abc.jpg[]

.Resultado 1
image:{pastaExercicio322}/resultado.png[]

.Resultado 2
image:{pastaExercicio322}/resultado2.png[]


== Preenchendo regiões ==

:pastaExercicio421: ContaObjeto/

=== Contando objetos problema ===
Observando-se o programa labeling.cpp como exemplo, é possível verificar que caso existam mais de 255 objetos na cena, o processo de rotulação poderá ficar comprometido. Identifique a situação em que isso ocorre e proponha uma solução para este problema.

[red]#Solucao# : Isso ocorre porque para cada objeto é atribuido um valor de cinza, se a imagem tive mais de 255 objetos o programa vai atribuir valores invalidos de cinza pois a imagem só possui 8 bits, a solução é fixar o valor de cinza dos objetos encontrados assim o programa podera classificar quantos objetos tiver na imagem.


.Codigo Modificado
[source,c++]
----
include::{pastaExercicio421}/main.cpp[]
----


.Imagem Original
image:{pastaExercicio421}/abc.png[]

.Resultado
image:{pastaExercicio421}/resultado.png[]


:pastaExercicio422: ContaBuraco/

=== Contando objetos com buracos ===
Aprimoração do algoritmo de contagem apresentado para identificar regiões com ou sem buracos internos. Assumindo que objetos com mais de um buraco podem existir. Incluindo suporte no seu algoritmo para não contar bolhas que tocam as bordas da imagem.

.O Codigo
[source,c++]
----
include::{pastaExercicio422}/main.cpp[]
----

.Resultado
image:{pastaExercicio422}/resultado.png[]
Para testar o codigo foram criados objetos com mais de um buraco e o programa contou ele apenas uma vez como esperado

== Manipulação de histogramas ==

:pastaExercicio521: HistogramaEqualizacao/
=== Equalizador histograma ===
Utilizando o programa exemplos/histogram.cpp como referência. Implemente um programa equalize.cpp. Este deverá, para cada imagem capturada, realizar a equalização do histogram antes de exibir a imagem.

o programa a seguir equaliza os 3 canais de cores RGB individualmente

.O Codigo
[source,c++]
----
include::{pastaExercicio521}/main.cpp[]
----

.Resultado utilizando 64 beans
image:{pastaExercicio521}/resultado64beans.png[]

.Resultados utilizando 256 beans
image:{pastaExercicio521}/resultado256beans.png[]
image:{pastaExercicio521}/resultado256_2beans.png[]

é possivel obervar a homogeneização do histograma e as cores mais vivas 

:pastaExercicio522: MotionDetec/
=== Detecção de movimento ===
Utilizando o programa exemplos/histogram.cpp como referência, implemente um programa motiondetector.cpp. Este deverá continuamente calcular o histograma da imagem (apenas uma componente de cor é suficiente) e compará-lo com o último histograma calculado. Quando a diferença entre estes ultrapassar um limiar pré-estabelecido, ative um alarme. Utilize uma função de comparação que julgar conveniente.

O programa utiliza apenas o canal R para calcular a diferença do histograma, e a diferença e calculada pela função chi-quadrado stem:[$$\sum_{k=1}^{\n} (histR[k]-prevHistR[k])^2/(histR[k])$$]

.O Codigo
[source,c++]
----
include::{pastaExercicio522}/main.cpp[]
----

.Resultado
image:{pastaExercicio522}/resultado.gif[]

== Filtragem no domínio espacial I ==

:pastaExercicio62: Laplgauss/
=== Laplace com gauss ===
Utilizando o programa exemplos/filtroespacial.cpp como referência, Implementar um programa laplgauss.cpp. O programa deverá acrescentar mais uma funcionalidade ao exemplo fornecido, permitindo que seja calculado o laplaciano do gaussiano das imagens capturadas.

.O Codigo
[source,c++]
----
include::{pastaExercicio62}/main.cpp[]
----

.Resultado utilizando filtro gaussiano
image:{pastaExercicio62}/gauss.png[]

.Resultado utilizando filtro laplaciano
image:{pastaExercicio62}/laplace.png[]

.Resultado utilizando filtro laplaciano do gaussiano
image:{pastaExercicio62}/lagauss.png[]

foi verificado que ao utilizar o filtro gaussiano antes do laplaciano faz muito diferença pois o filtro gaussiano elimina pequenos ruidos que existem na imagem e o laplaciano consegue distinguir melhor as bordas


== Filtragem no domínio espacial II ==

:pastaExercicio71: TiltShift/
=== TiltShift ===
Utilizando o programa exemplos/addweighted.cpp como referência, implemente um programa tiltshift.cpp. Três ajustes deverão ser providos na tela da interface:

* um ajuste para regular a altura da região central que entrará em foco

* um ajuste para regular a força de decaimento da região borrada

* um ajuste para regular a posição vertical do centro da região que entrará em foco. Finalizado o programa, a imagem produzida deverá ser salva em arquivo.

.O Codigo
[source,c++]
----
include::{pastaExercicio71}/main.cpp[]
----

.Resultado
image:{pastaExercicio71}/resultado_.png[]


:pastaExercicio72: TiltShiftVideo/
=== TiltShift com video ===
Utilizando o programa exemplos/addweighted.cpp como referência, implemente um programa tiltshiftvideo.cpp. Tal programa deverá ser capaz de processar um arquivo de vídeo, produzir o efeito de tilt-shift nos quadros presentes e escrever o resultado em outro arquivo de vídeo. A ideia é criar um efeito de miniaturização de cenas. Descarte quadros em uma taxa que julgar conveniente para evidenciar o efeito de stop motion, comum em vídeos desse tipo.

.O Codigo
[source,c++]
----
include::{pastaExercicio72}/main.cpp[]
----

.Resultado
image:{pastaExercicio72}/result3_1.gif[]


== Filtragem no domínio da frequência ==

:pastaExercicio81: FiltroHomomorfico/
=== Filtro Homomorfico ===
Utilizando o programa exemplos/dft.cpp como referência, implemente o filtro homomórfico para melhorar imagens com iluminação irregular. Crie uma cena mal iluminada e ajuste os parâmetros do filtro homomórfico para corrigir a iluminação da melhor forma possível. Assuma que a imagem fornecida é em tons de cinza.


.O Codigo
[source,c++]
----
include::{pastaExercicio81}/main.cpp[]
----


==  Canny ==

:pastaExercicio101: Pontilhismo/
=== Canny e a arte com pontilhismo ===
Utilizando os programas exemplos/canny.cpp e exemplos/pontilhismo.cpp como referência, implemente um programa cannypoints.cpp. A idéia é usar as bordas produzidas pelo algoritmo de Canny para melhorar a qualidade da imagem pontilhista gerada. A forma como a informação de borda será usada é livre. Entretanto, são apresentadas algumas sugestões de técnicas que poderiam ser utilizadas:

* Desenhar pontos grandes na imagem pontilhista básica.
* Usar a posição dos pixels de borda encontrados pelo algoritmo de Canny para desenhar pontos nos respectivos locais na imagem gerada.
* Experimente ir aumentando os limiares do algoritmo de Canny e, para cada novo par de limiares, desenhar círculos cada vez menores nas posições encontradas. A Figura Pontilhismo aplicado à imagem Lena foi desenvolvida usando essa técnica.

.O Codigo
[source,c++]
----
include::{pastaExercicio101}/main.cpp[]
----


== Bibliografia ==
[bibliography]
- http://docs.opencv.org/ - Principal portal de documentação OpenCV.
- http://agostinhobritojr.github.io/tutoriais/pdi/. - Site de referência para as tarefas em OpenCV.
